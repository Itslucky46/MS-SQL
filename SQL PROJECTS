USE [LAXMAN BHOSALE]

CREATE TABLE cars (
car_id INT PRIMARY KEY,
make VARCHAR(50),
type VARCHAR(50),
style VARCHAR(50),
cost_$ INT
);
--------------------
INSERT INTO cars (car_id, make, type, style, cost_$)
VALUES (1, 'Honda', 'Civic', 'Sedan', 30000),
(2, 'Toyota', 'Corolla', 'Hatchback', 25000),
(3, 'Ford', 'Explorer', 'SUV', 40000),
(4, 'Chevrolet', 'Camaro', 'Coupe', 36000),
(5, 'BMW', 'X5', 'SUV', 55000),
(6, 'Audi', 'A4', 'Sedan', 48000),
(7, 'Mercedes', 'C-Class', 'Coupe', 60000),
(8, 'Nissan', 'Altima', 'Sedan', 26000);
--------------------
CREATE TABLE salespersons (
salesman_id INT PRIMARY KEY,
name VARCHAR(50),
age INT,
city VARCHAR(50)
);
--------------------
INSERT INTO salespersons (salesman_id, name, age, city)
VALUES (1, 'John Smith', 28, 'New York'),
(2, 'Emily Wong', 35, 'San Fran'),
(3, 'Tom Lee', 42, 'Seattle'),
(4, 'Lucy Chen', 31, 'LA');
--------------------
CREATE TABLE sales (
sale_id INT PRIMARY KEY,
car_id INT,
salesman_id INT,
purchase_date DATE,
FOREIGN KEY (car_id) REFERENCES cars(car_id),
FOREIGN KEY (salesman_id) REFERENCES salespersons(salesman_id)
);
--------------------
INSERT INTO sales (sale_id, car_id, salesman_id, purchase_date)
VALUES (1, 1, 1, '2021-01-01'),
(2, 3, 3, '2021-02-03'),
(3, 2, 2, '2021-02-10'),
(4, 5, 4, '2021-03-01'),
(5, 8, 1, '2021-04-02'),
(6, 2, 1, '2021-05-05'),
(7, 4, 2, '2021-06-07'),
(8, 5, 3, '2021-07-09'),
(9, 2, 4, '2022-01-01'),
(10, 1, 3, '2022-02-03'),
(11, 8, 2, '2022-02-10'),
(12, 7, 2, '2022-03-01'),
(13, 5, 3, '2022-04-02'),
(14, 3, 1, '2022-05-05'),
(15, 5, 4, '2022-06-07'),
(16, 1, 2, '2022-07-09'),
(17, 2, 3, '2023-01-01'),
(18, 6, 3, '2023-02-03'),
(19, 7, 1, '2023-02-10'),
(20, 4, 4, '2023-03-01');

 -- Questions
 -- Answer the following questions

-- 1. What are the details of all cars purchased in the year 2022?

select c.make,c.type,c.style,c.cost_$ from cars c
join sales s on c.car_id=s.car_id
where year(s.purchase_date)=2022;

-- 2. What is the total number of cars sold by each salesperson?

select sa.name,count(s.car_id) as "Cars Sold" from salespersons sa
join sales s on sa.salesman_id=s.salesman_id
group by sa.name

-- 3. What is the total revenue generated by each salesperson?

select sa.name,sum(c.cost_$) as"Revenue" from cars c
join sales s on c.car_id=s.car_id
join salespersons sa on sa.salesman_id=s.salesman_id
group by sa.name
order by "Revenue" desc;

-- 4. What are the details of the cars sold by each salesperson?

select sa.name,c.make,c.type,c.style,c.cost_$ from cars c
join sales s on c.car_id=s.car_id
join salespersons sa on sa.salesman_id=s.salesman_id;

-- 5. What is the total revenue generated by each car type?

select c.type,sum(c.cost_$) as"Revenue" from cars c
join sales s on c.car_id=s.car_id
join salespersons sa on sa.salesman_id=s.salesman_id
group by c.type
order by "Revenue" desc;

-- 6. What are the details of the cars sold in the year 2021 by salesperson 'Emily Wong'?

select c.make,c.type,c.style,c.cost_$ from cars c
join sales s on c.car_id=s.car_id
join salespersons sa on sa.salesman_id=s.salesman_id
where year(s.purchase_date)=2021 and sa.name like 'Emily Wong';

-- 7. What is the total revenue generated by the sales of hatchback cars?

select style,sum(cost_$) as "Revenue" from cars c
join sales s on c.car_id=s.car_id
where style like 'Hatchback'
group by style

-- 8. What is the total revenue generated by the sales of SUV cars in the year 2022?

SELECT SUM(c.cost_$) AS total_revenue_generated
FROM cars c
JOIN sales s ON c.car_id = s.car_id
WHERE c.style = 'SUV' AND YEAR(s.purchase_date) = 2022;

-- 9. What is the name and city of the salesperson who sold the most number of cars in the year 2023?

select Top(1) sa.name,sa.city,COUNT(s.car_id) as "Cars Sold" from salespersons sa
join sales s on sa.salesman_id=s.salesman_id
where year(s.purchase_date)=2023
group by sa.name,sa.city
order by "Cars Sold" desc;

-- 10. What is the name and age of the salesperson who generated the highest revenue in the year 2022?  */ 

SELECT Top(1) sa.name,sa.age
FROM cars c
JOIN sales s ON c.car_id = s.car_id
join salespersons sa on sa.salesman_id=s.salesman_id
WHERE YEAR(s.purchase_date) = 2022
group by sa.name,sa.age
order by SUM(c.cost_$) desc;


USE Assignments

SELECT * FROM Players
SELECT * FROM Teams
SELECT * FROM Matches

/* 1. What are the names of the players whose salary is greater than 100,000? */
 SELECT player_name
 FROM Players
 WHERE salary > 100000;

/* 2. What is the team name of the player with player_id = 3? */
SELECT team_name
FROM Teams
WHERE team_id = (
    SELECT team_id
    FROM Players
    WHERE player_id = 3);

	select team_name from Teams
	where team_id = ( select team_id from players
	where player_id=3);


/* 3. What is the total number of players in each team? */
SELECT team_name, COUNT(*) AS total_players
FROM Teams
JOIN Players ON Teams.team_id = Players.team_id
GROUP BY team_name;


/* 4. What is the team name and captain name of the team with team_id = 2? */
SELECT team_name, player_name AS captain_name
FROM Teams
JOIN Players ON Teams.captain_id = Players.player_id
WHERE Teams.team_id = 2;


/* 5. What are the player names and their roles in the team with team_id = 1? */

SELECT player_name, role
FROM Players
WHERE team_id = 1;


/* 6. What are the team names and the number of matches they have won? */

SELECT Teams.team_name, COUNT(*) AS matches_won
FROM Teams
JOIN Matches ON Teams.team_id = Matches.winner_id
GROUP BY Teams.team_name;

/* 7. What is the average salary of players in the teams with country 'USA'? */

SELECT AVG(salary) AS average_salary
FROM Players
JOIN Teams ON Players.team_id = Teams.team_id
WHERE Teams.country = 'USA';

/* 8. Which team won the most matches? */

SELECT * FROM Players
SELECT * FROM Teams
SELECT * FROM Matches


select t.team_name,m.score_team1,m.score_team2 from Teams t
inner join Matches m
on (t.team_id=m.team1_id)
group by t.team_name,m.score_team1,m.score_team2
order by sum(score_team1+score_team2) desc



/* 9. What are the team names and the number of players in each team whose salary is greater than 100,000? */

SELECT Teams.team_name, COUNT(*) AS num_players
FROM Teams
JOIN Players ON Teams.team_id = Players.team_id
WHERE Players.salary > 100000
GROUP BY Teams.team_name;

SELECT Teams.team_name, COUNT(player_id) AS num_players
FROM Teams
JOIN Players ON Teams.team_id = Players.team_id
WHERE Players.salary > 100000
GROUP BY Teams.team_name;

/* 10. What is the date and the score of the match with match_id = 3? */

SELECT match_date, score_team1, score_team2
FROM Matches
WHERE match_id = 3;

use assignments

select * from country
select * from Customers
select * from orders
select * from products
Select * from baskets

CREATE TABLE country (
country_id INT PRIMARY KEY,
country_name VARCHAR(50),
head_office VARCHAR(50)
);
--------------------
INSERT INTO country (country_id, country_name, head_office)
VALUES (1, 'UK', 'London'),
(2, 'USA', 'New York'),
(3, 'China', 'Beijing');
--------------------
CREATE TABLE customers (
customer_id INT PRIMARY KEY,
first_shop DATE,
age INT,
rewards VARCHAR(50),
can_email VARCHAR(50)
);
--------------------
INSERT INTO customers (customer_id, first_shop, age, rewards, can_email)
VALUES (1, '2022-03-20', 23, 'yes', 'no'),
(2, '2022-03-25', 26, 'no', 'no'),
(3, '2022-04-06', 32, 'no', 'no'),
(4, '2022-04-13', 25, 'yes', 'yes'),
(5, '2022-04-22', 49, 'yes', 'yes'),
(6, '2022-06-18', 28, 'yes', 'no'),
(7, '2022-06-30', 36, 'no', 'no'),
(8, '2022-07-04', 37, 'yes', 'yes');
--------------------
CREATE TABLE orders (
order_id INT PRIMARY KEY,
customer_id INT,
date_shop DATE,
sales_channel VARCHAR(50),
country_id INT,
FOREIGN KEY (customer_id) REFERENCES customers(customer_id),
FOREIGN KEY (country_id) REFERENCES country(country_id)
);
--------------------
INSERT INTO orders (order_id, customer_id, date_shop, sales_channel, country_id)
VALUES (1, 1, '2023-01-16', 'retail', 1),
(2, 4, '2023-01-20', 'retail', 1),
(3, 2, '2023-01-25', 'retail', 2),
(4, 3, '2023-01-25', 'online', 1),
(5, 1, '2023-01-28', 'retail', 3),
(6, 5, '2023-02-02', 'online', 1),
(7, 6, '2023-02-05', 'retail', 1),
(8, 3, '2023-02-11', 'online', 3);
--------------------
CREATE TABLE products (
product_id INT PRIMARY KEY,
category VARCHAR(50),
price NUMERIC(5,2)
);
--------------------
INSERT INTO products (product_id, category, price)
VALUES (1, 'food', 5.99),
(2, 'sports', 12.49),
(3, 'vitamins', 6.99),
(4, 'food', 0.89),
(5, 'vitamins', 15.99);
--------------------
CREATE TABLE baskets (
order_id INT,
product_id INT,
FOREIGN KEY (order_id) REFERENCES orders(order_id),
FOREIGN KEY (product_id) REFERENCES products(product_id)
);
--------------------
INSERT INTO baskets (order_id, product_id)
VALUES (1, 1),
(1, 2),
(1, 5),
(2, 4),
(3, 3),
(4, 2),
(4, 1),
(5, 3),
(5, 5),
(6, 4),
(6, 3),
(6, 1),
(7, 2),
(7, 1),
(8, 3),
(8, 3);


--1. What are the names of all the countries in the country table?

 select country_name from Country


-- 2. What is the total number of customers in the customers table?

select count(*) as "Total Customers" from Customers

-- 3. What is the average age of customers who can receive marketing emails (can_email is set to 'yes')?

select avg(age) "Avg Age" from customers
where can_email='yes'


-- 4. How many orders were made by customers aged 30 or older?

select Count(*) "Toatal orders" from orders o
inner Join customers c
on(o.customer_id=c.customer_id)
where age>=30

-- 5. What is the total revenue generated by each product category?

select p.category,Sum(p.price)as "Revenue" from products p
inner join baskets b on(p.product_id=b.product_id)
inner join orders o on(o.order_id=b.order_id)
group by p.category

-- 6. What is the average price of products in the 'food' category?

select avg(p.price)as "Avg price" from products p
inner join baskets b on(p.product_id=b.product_id)
inner join orders o on(o.order_id=b.order_id)
where category='food'
group by p.category



-- 7. How many orders were made in each sales channel (sales_channel column) in the orders table?


select  o.sales_channel,count(o.order_id)as "Total Oredrs" from orders o
inner join baskets b on(b.order_id=o.order_id)
inner join customers c on(c.customer_id=o.customer_id)
group by o.sales_channel


-- 8.What is the date of the latest order made by a customer who can receive marketing emails?


select max(o.date_shop)as "Latest Order Date" from orders o
inner join customers c on o.customer_id=c.customer_id
where can_email='yes'

-- 9. What is the name of the country with the highest number of orders?


select top(1) c.country_name, COUNT(o.order_id) as " highest orders" from country c
inner join orders o on c.country_id=o.country_id
group by c.country_name
order by COUNT(o.order_id)desc


-- 10. What is the average age of customers who made orders in the 'vitamins' product category?

select avg(c.age)"Avg Age" from customers c
inner join orders o on c.customer_id=o.customer_id
inner join  baskets b on o.order_id=b.order_id
inner join products p on p.product_id=b.product_id
where p.category='vitamins'

USE Assignments

select * from Customers2
select * from Branches
select * from Accounts
select * from Transactions

-- Create the Customers table
CREATE TABLE Customers2 (
CustomerID INT PRIMARY KEY,
FirstName VARCHAR(50) NOT NULL,
LastName VARCHAR(50) NOT NULL,
City VARCHAR(50) NOT NULL,
State VARCHAR(2) NOT NULL
);
--------------------
-- Populate the Customers table
INSERT INTO Customers2 (CustomerID, FirstName, LastName, City, State)
VALUES (1, 'John', 'Doe', 'New York', 'NY'),
(2, 'Jane', 'Doe', 'New York', 'NY'),
(3, 'Bob', 'Smith', 'San Francisco', 'CA'),
(4, 'Alice', 'Johnson', 'San Francisco', 'CA'),
(5, 'Michael', 'Lee', 'Los Angeles', 'CA'),
(6, 'Jennifer', 'Wang', 'Los Angeles', 'CA');
--------------------
-- Create the Branches table
CREATE TABLE Branches (
BranchID INT PRIMARY KEY,
BranchName VARCHAR(50) NOT NULL,
City VARCHAR(50) NOT NULL,
State VARCHAR(2) NOT NULL
);
--------------------
-- Populate the Branches table
INSERT INTO Branches (BranchID, BranchName, City, State)
VALUES (1, 'Main', 'New York', 'NY'),
(2, 'Downtown', 'San Francisco', 'CA'),
(3, 'West LA', 'Los Angeles', 'CA'),
(4, 'East LA', 'Los Angeles', 'CA'),
(5, 'Uptown', 'New York', 'NY'),
(6, 'Financial District', 'San Francisco', 'CA'),
(7, 'Midtown', 'New York', 'NY'),
(8, 'South Bay', 'San Francisco', 'CA'),
(9, 'Downtown', 'Los Angeles', 'CA'),
(10, 'Chinatown', 'New York', 'NY'),
(11, 'Marina', 'San Francisco', 'CA'),
(12, 'Beverly Hills', 'Los Angeles', 'CA'),
(13, 'Brooklyn', 'New York', 'NY'),
(14, 'North Beach', 'San Francisco', 'CA'),
(15, 'Pasadena', 'Los Angeles', 'CA');
--------------------
-- Create the Accounts table
CREATE TABLE Accounts (
AccountID INT PRIMARY KEY,
CustomerID INT NOT NULL,
BranchID INT NOT NULL,
AccountType VARCHAR(50) NOT NULL,
Balance DECIMAL(10, 2) NOT NULL,
FOREIGN KEY (CustomerID) REFERENCES Customers2(CustomerID),
FOREIGN KEY (BranchID) REFERENCES Branches(BranchID)
);
--------------------
-- Populate the Accounts table
INSERT INTO Accounts (AccountID, CustomerID, BranchID, AccountType, Balance)
VALUES (1, 1, 5, 'Checking', 1000.00),
(2, 1, 5, 'Savings', 5000.00),
(3, 2, 1, 'Checking', 2500.00),
(4, 2, 1, 'Savings', 10000.00),
(5, 3, 2, 'Checking', 7500.00),
(6, 3, 2, 'Savings', 15000.00),
(7, 4, 8, 'Checking', 5000.00),
(8, 4, 8, 'Savings', 20000.00),
(9, 5, 14, 'Checking', 10000.00),
(10, 5, 14, 'Savings', 50000.00),
(11, 6, 2, 'Checking', 5000.00),
(12, 6, 2, 'Savings', 10000.00),
(13, 1, 5, 'Credit Card', -500.00),
(14, 2, 1, 'Credit Card', -1000.00),
(15, 3, 2, 'Credit Card', -2000.00);
--------------------
-- Create the Transactions table
CREATE TABLE Transactions (
TransactionID INT PRIMARY KEY,
AccountID INT NOT NULL,
TransactionDate DATE NOT NULL,
Amount DECIMAL(10, 2) NOT NULL,
FOREIGN KEY (AccountID) REFERENCES Accounts(AccountID)
);
--------------------
-- Populate the Transactions table
INSERT INTO Transactions (TransactionID, AccountID, TransactionDate, Amount)
VALUES (1, 1, '2022-01-01', -500.00),
(2, 1, '2022-01-02', -250.00),
(3, 2, '2022-01-03', 1000.00),
(4, 3, '2022-01-04', -1000.00),
(5, 3, '2022-01-05', 500.00),
(6, 4, '2022-01-06', 1000.00),
(7, 4, '2022-01-07', -500.00),
(8, 5, '2022-01-08', -2500.00),
(9, 6, '2022-01-09', 500.00),
(10, 6, '2022-01-10', -1000.00),
(11, 7, '2022-01-11', -500.00),
(12, 7, '2022-01-12', -250.00),
(13, 8, '2022-01-13', 1000.00),
(14, 8, '2022-01-14', -1000.00),
(15, 9, '2022-01-15', 500.00);





-- 1. What are the names of all the customers who live in New York?

select concat(FirstName,' ',LastName ) As "Full Name"  from customers2
where city ='New York'

-- 2. What is the total number of accounts in the Accounts table?

select count(accountID) As "Total Accounts" from accounts

-- 3. What is the total balance of all checking accounts?


select Sum(balance)"Total balance" from Accounts
where accounttype='Checking'

-- 4. What is the total balance of all accounts associated with customers who live in Los Angeles?

select Sum(balance)"Total balance" from Accounts a
inner join Customers2 c on c.CustomerID=a.CustomerID
where c.City='Los Angeles'

-- 5. Which branch has the highest average account balance?

select Top(1) b.BranchName,round(avg(a.balance),0) as "Total balance" from Accounts a
inner join Branches b on b.BranchID=a.BranchID
group by b.Branchname
order by "Total balance" desc

-- 6. Which customer has the highest current balance in their accounts?

select Top(1) CONCAT(c.FirstName,' ',c.LastName) as "Full name" ,sum(a.Balance)"Highest Balance" from Customers2 c
inner join Accounts a on (c.CustomerID=a.CustomerID)
group by CONCAT(c.FirstName,' ',c.LastName)
order by "Highest Balance" desc

-- 7. Which customer has made the most transactions in the Transactions table?

select Top(1) CONCAT(c.FirstName,' ',c.LastName) as "Full name" ,sum(a.Balance)"Highest Balance" from Customers2 c
inner join Accounts a on (c.CustomerID=a.CustomerID)
group by CONCAT(c.FirstName,' ',c.LastName)
order by "Highest Balance" desc

-- 8.Which branch has the highest total balance across all of its accounts?

select top(1) BranchName,SUM(a.Balance) as "Highest Total Balance" from Branches b
inner Join Accounts a on(b.BranchID=a.BranchID)
group by BranchName
order by SUM(a.Balance) desc

-- 9. Which customer has the highest total balance across all of their accounts, including savings and checking accounts?

select Top(2)  BranchName,count(TransactionID) as "Highest Transaction" from Transactions t
inner join Accounts a on(t.AccountID=a.AccountID)
inner join Branches b on (b.BranchID=a.BranchID)
group by BranchName
order by count(TransactionID) desc 

-- 10. Which branch has the highest number of transactions in the Transactions table?

select Top(2)  BranchName,count(TransactionID) as "Highest Transaction" from Transactions t
inner join Accounts a on(t.AccountID=a.AccountID)
inner join Branches b on (b.BranchID=a.BranchID)
group by BranchName
order by count(TransactionID) desc 

Use Assignments

select * from pubs
select * from beverages
select * from sales2
select * from ratings

CREATE TABLE pubs (
pub_id INT PRIMARY KEY,
pub_name VARCHAR(50),
city VARCHAR(50),
state VARCHAR(50),
country VARCHAR(50)
);
--------------------
-- Create the 'beverages' table
CREATE TABLE beverages (
beverage_id INT PRIMARY KEY,
beverage_name VARCHAR(50),
category VARCHAR(50),
alcohol_content FLOAT,
price_per_unit DECIMAL(8, 2)
);
--------------------
-- Create the 'sales' table
CREATE TABLE sales2 (
sale_id INT PRIMARY KEY,
pub_id INT,
beverage_id INT,
quantity INT,
transaction_date DATE,
FOREIGN KEY (pub_id) REFERENCES pubs(pub_id),
FOREIGN KEY (beverage_id) REFERENCES beverages(beverage_id)
);
--------------------
-- Create the 'ratings' table 
CREATE TABLE ratings (
rating_id INT PRIMARY KEY, 
pub_id INT, 
customer_name VARCHAR(50),
rating FLOAT,
review TEXT,
FOREIGN KEY (pub_id) REFERENCES pubs(pub_id) 
);
--------------------
-- Insert sample data into the 'pubs' table
INSERT INTO pubs (pub_id, pub_name, city, state, country)
VALUES
(1, 'The Red Lion', 'London', 'England', 'United Kingdom'),
(2, 'The Dubliner', 'Dublin', 'Dublin', 'Ireland'),
(3, 'The Cheers Bar', 'Boston', 'Massachusetts', 'United States'),
(4, 'La Cerveceria', 'Barcelona', 'Catalonia', 'Spain');
--------------------
-- Insert sample data into the 'beverages' table
INSERT INTO beverages (beverage_id, beverage_name, category, alcohol_content, price_per_unit)
VALUES
(1, 'Guinness', 'Beer', 4.2, 5.99),
(2, 'Jameson', 'Whiskey', 40.0, 29.99),
(3, 'Mojito', 'Cocktail', 12.0, 8.99),
(4, 'Chardonnay', 'Wine', 13.5, 12.99),
(5, 'IPA', 'Beer', 6.8, 4.99),
(6, 'Tequila', 'Spirit', 38.0, 24.99);
--------------------
INSERT INTO sales2 (sale_id, pub_id, beverage_id, quantity, transaction_date)
VALUES
(1, 1, 1, 10, '2023-05-01'),
(2, 1, 2, 5, '2023-05-01'),
(3, 2, 1, 8, '2023-05-01'),
(4, 3, 3, 12, '2023-05-02'),
(5, 4, 4, 3, '2023-05-02'),
(6, 4, 6, 6, '2023-05-03'),
(7, 2, 3, 6, '2023-05-03'),
(8, 3, 1, 15, '2023-05-03'),
(9, 3, 4, 7, '2023-05-03'),
(10, 4, 1, 10, '2023-05-04'),
(11, 1, 3, 5, '2023-05-06'),
(12, 2, 2, 3, '2023-05-09'),
(13, 2, 5, 9, '2023-05-09'),
(14, 3, 6, 4, '2023-05-09'),
(15, 4, 3, 7, '2023-05-09'),
(16, 4, 4, 2, '2023-05-09'),
(17, 1, 4, 6, '2023-05-11'),
(18, 1, 6, 8, '2023-05-11'),
(19, 2, 1, 12, '2023-05-12'),
(20, 3, 5, 5, '2023-05-13');
--------------------
-- Insert sample data into the 'ratings' table
INSERT INTO ratings (rating_id, pub_id, customer_name, rating, review)
VALUES
(1, 1, 'John Smith', 4.5, 'Great pub with a wide selection of beers.'),
(2, 1, 'Emma Johnson', 4.8, 'Excellent service and cozy atmosphere.'),
(3, 2, 'Michael Brown', 4.2, 'Authentic atmosphere and great beers.'),
(4, 3, 'Sophia Davis', 4.6, 'The cocktails were amazing! Will definitely come back.'),
(5, 4, 'Oliver Wilson', 4.9, 'The wine selection here is outstanding.'),
(6, 4, 'Isabella Moore', 4.3, 'Had a great time trying different spirits.'),
(7, 1, 'Sophia Davis', 4.7, 'Loved the pub food! Great ambiance.'),
(8, 2, 'Ethan Johnson', 4.5, 'A good place to hang out with friends.'),
(9, 2, 'Olivia Taylor', 4.1, 'The whiskey tasting experience was fantastic.'),
(10, 3, 'William Miller', 4.4, 'Friendly staff and live music on weekends.');
--------------------


-- 1. How many pubs are located in each country??

select  country,Count(pub_name) as "Located" from pubs p
group By country

-- 2. What is the total sales amount for each pub, including the beverage price and quantity sold?

select pub_name,sum(b.price_per_unit*s.quantity) as "Revenue" from pubs p
inner join sales2 s on p.pub_id=s.pub_id
inner join beverages b on b.beverage_id=s.beverage_id
group by pub_name
order by "Revenue" desc;

-- 3. Which pub has the highest average rating?

select pub_name,round(avg(rating),2) as "Avg Rating" from pubs p
inner join ratings r 
on(p.pub_id=r.pub_id)
group by pub_name
order by "Avg Rating" desc;

-- 4. What are the top 5 beverages by sales quantity across all pubs?


select Top(5) beverage_name,sum(quantity) as "Sales Quantity" from beverages b
inner join sales2 s 
on (b.beverage_id=s.beverage_id)
group by beverage_name
order by "Sales Quantity" desc

-- 5. How many sales transactions occurred on each date?

select transaction_date,count(transaction_date)as"transactions" from sales2
group by transaction_date
order by "transactions" desc

-- 6. Find the name of someone that had cocktails and which pub they had it in.

SELECT r.customer_name, p.pub_name
FROM ratings r
JOIN pubs p ON r.pub_id = p.pub_id
JOIN beverages b ON r.pub_id = b.beverage_id
WHERE b.category = 'Cocktail';

-- 7. What is the average price per unit for each category of beverages, excluding the category 'Spirit'?

select category,round(avg(price_per_unit),2) as"Avg Price" from beverages
where category<>'Spirit'
group by category
order by "Avg Price" desc;

-- 8. Which pubs have a rating higher than the average rating of all pubs?

select p.Pub_name,r.rating from pubs p 
inner join ratings r 
on(p.pub_id=r.pub_id)
where r.rating>(select Avg(rating) from ratings )
order by rating desc

-- 9. What is the running total of sales amount for each pub, ordered by the transaction date?


select p.pub_name,s.transaction_date,sum(b.price_per_unit*s.quantity) as "Sales" from sales2 s
inner join pubs p on s.pub_id=p.pub_id
inner join beverages b on b.beverage_id=s.beverage_id
group by p.pub_name,s.transaction_date
order by s.transaction_date 

SELECT p.pub_name, s.transaction_date, SUM(b.price_per_unit * s.quantity)
OVER (PARTITION BY s.pub_id ORDER BY s.transaction_date) AS running_total
FROM sales2 s
JOIN pubs p ON p.pub_id = s.pub_id
JOIN beverages b ON b.beverage_id = s.beverage_id
ORDER BY s.transaction_date;

-- 10. For each country, what is the average price per unit of beverages in each category,
--and what is the overall average price per unit of beverages across all categories?

SELECT p.country, b.category, AVG(b.price_per_unit) AS average_price_per_unit
FROM pubs p
JOIN sales2 s ON p.pub_id = s.pub_id
JOIN beverages b ON b.beverage_id = s.beverage_id
GROUP BY p.country, b.category 
order by p.country


--11. For each pub, what is the percentage contribution of each category of beverages to the total sales amount, and what is the pub's overall sales amount?

select p.pub_name,b.category,sum(b.price_per_unit*s.quantity) as "Revenue" ,
(sum(b.price_per_unit*s.quantity)/
(select sum(b.price_per_unit*s.quantity) from sales2 s
inner join beverages b on b.beverage_id=s.beverage_id))*100 as "percentage contribution"
from pubs p
inner join sales2 s on p.pub_id=s.pub_id
inner join beverages b on b.beverage_id=s.beverage_id
group by p.pub_name,b.category


SELECT p.pub_name, b.category, SUM(b.price_per_unit * s.quantity) AS sales_amount,
       (SUM(b.price_per_unit * s.quantity) / 
        (SELECT SUM(b.price_per_unit * s.quantity) FROM sales2 s
		JOIN beverages b ON b.beverage_id = s.beverage_id)) * 100 AS percentage_contribution
FROM pubs p
JOIN sales2 s ON p.pub_id = s.pub_id
JOIN beverages b ON b.beverage_id = s.beverage_id
GROUP BY p.pub_name, b.category;


use assignments

select * from sustainable_clothing
select * from  marketing_campaigns
select * from  transactions2

-- Create the table
CREATE TABLE sustainable_clothing (
product_id INT PRIMARY KEY,
product_name VARCHAR(100),
category VARCHAR(50),
size VARCHAR(10),
price FLOAT
);
-- Insert data into the table
INSERT INTO sustainable_clothing (product_id, product_name, category, size, price)
VALUES
(1, 'Organic Cotton T-Shirt', 'Tops', 'S', 29.99),
(2, 'Recycled Denim Jeans', 'Bottoms', 'M', 79.99),
(3, 'Hemp Crop Top', 'Tops', 'L', 24.99),
(4, 'Bamboo Lounge Pants', 'Bottoms', 'XS', 49.99),
(5, 'Eco-Friendly Hoodie', 'Outerwear', 'XL', 59.99),
(6, 'Linen Button-Down Shirt', 'Tops', 'M', 39.99),
(7, 'Organic Cotton Dress', 'Dresses', 'S', 69.99),
(8, 'Sustainable Swim Shorts', 'Swimwear', 'L', 34.99),
(9, 'Recycled Polyester Jacket', 'Outerwear', 'XL', 89.99),
(10, 'Bamboo Yoga Leggings', 'Activewear', 'XS', 54.99),
(11, 'Hemp Overalls', 'Bottoms', 'M', 74.99),
(12, 'Organic Cotton Sweater', 'Tops', 'L', 49.99),
(13, 'Cork Sandals', 'Footwear', 'S', 39.99),
(14, 'Recycled Nylon Backpack', 'Accessories', 'One Size', 59.99),
(15, 'Organic Cotton Skirt', 'Bottoms', 'XS', 34.99),
(16, 'Hemp Baseball Cap', 'Accessories', 'One Size', 24.99),
(17, 'Upcycled Denim Jacket', 'Outerwear', 'M', 79.99),
(18, 'Linen Jumpsuit', 'Dresses', 'L', 69.99),
(19, 'Organic Cotton Socks', 'Accessories', 'M', 9.99),
(20, 'Bamboo Bathrobe', 'Loungewear', 'XL', 69.99);
-- Create the table
CREATE TABLE marketing_campaigns (
campaign_id INT PRIMARY KEY,
campaign_name VARCHAR(100),
product_id INT,
start_date DATE,
end_date DATE,
FOREIGN KEY (product_id) REFERENCES sustainable_clothing (product_id)
);
-- Insert data into the table
INSERT INTO marketing_campaigns (campaign_id, campaign_name, product_id, start_date, end_date)
VALUES
(1, 'Summer Sale', 2, '2023-06-01', '2023-06-30'),
(2, 'New Collection Launch', 10, '2023-07-15', '2023-08-15'),
(3, 'Super Save', 7, '2023-08-20', '2023-09-15');
-- Create the table
CREATE TABLE transactions2 (
transaction_id INT PRIMARY KEY,
product_id INT,
quantity INT,
purchase_date DATE,
FOREIGN KEY (product_id) REFERENCES sustainable_clothing (product_id)
);
-- Insert data into the table
INSERT INTO transactions2 (transaction_id, product_id, quantity, purchase_date)
VALUES
(1, 2, 2, '2023-06-02'),
(2, 14, 1, '2023-06-02'),
(3, 5, 2, '2023-06-05'),
(4, 2, 1, '2023-06-07'),
(5, 19, 2, '2023-06-10'),
(6, 2, 1, '2023-06-13'),
(7, 16, 1, '2023-06-13'),
(8, 10, 2, '2023-06-15'),
(9, 2, 1, '2023-06-18'),
(10, 4, 1, '2023-06-22'),
(11, 18, 2, '2023-06-26'),
(12, 2, 1, '2023-06-30'),
(13, 13, 1, '2023-06-30'),
(14, 4, 1, '2023-07-04'),
(15, 6, 2, '2023-07-08'),
(16, 15, 1, '2023-07-08'),
(17, 9, 2, '2023-07-12'),
(18, 20, 1, '2023-07-12'),
(19, 11, 1, '2023-07-16'),
(20, 10, 1, '2023-07-20'),
(21, 12, 2, '2023-07-24'),
(22, 5, 1, '2023-07-29'),
(23, 10, 1, '2023-07-29'),
(24, 10, 1, '2023-08-03'),
(25, 19, 2, '2023-08-08'),
(26, 3, 1, '2023-08-14'),
(27, 10, 1, '2023-08-14'),
(28, 16, 2, '2023-08-20'),
(29, 18, 1, '2023-08-27'),
(30, 12, 2, '2023-09-01'),
(31, 13, 1, '2023-09-05'),
(32, 7, 1, '2023-09-05'),
(33, 6, 1, '2023-09-10'),
(34, 15, 2, '2023-09-14'),
(35, 9, 1, '2023-09-14'),
(36, 11, 2, '2023-09-19'),
(37, 17, 1, '2023-09-23'),
(38, 2, 1, '2023-09-28'),
(39, 14, 1, '2023-09-28'),
(40, 5, 2, '2023-09-30'),
(41, 16, 1, '2023-10-01'),
(42, 12, 2, '2023-10-01'),
(43, 1, 1, '2023-10-01'),
(44, 7, 1, '2023-10-02'),
(45, 18, 2, '2023-10-03'),
(46, 12, 1, '2023-10-03'),
(47, 13, 1, '2023-10-04'),
(48, 4, 1, '2023-10-05'),
(49, 12, 2, '2023-10-05'),
(50, 7, 1, '2023-10-06'),
(51, 4, 2, '2023-10-08'),
(52, 8, 2, '2023-10-08'),
(53, 16, 1, '2023-10-09'),
(54, 19, 1, '2023-10-09'),
(55, 1, 1, '2023-10-10'),
(56, 18, 2, '2023-10-10'),
(57, 2, 1, '2023-10-10'),
(58, 15, 2, '2023-10-11'),
(59, 17, 2, '2023-10-13'),
(60, 13, 1, '2023-10-13'),
(61, 10, 2, '2023-10-13'),
(62, 9, 1, '2023-10-13'),
(63, 19, 2, '2023-10-13'),
(64, 20, 1, '2023-10-14')


-- 1. How many transactions were completed during each marketing campaign?


select campaign_name,COUNT(tr.transaction_id) as "transaction" from  marketing_campaigns mc
inner join transactions2 tr on mc.product_id=tr.product_id
group by mc.campaign_name

-- 2. Which product had the highest sales quantity?

select Top(1) sc.product_name,sum(tr.quantity)as "Hieghest Sales Quantity" from sustainable_clothing sc
inner join transactions2 tr on sc.product_id=tr.product_id
group by sc.product_name
order by "Hieghest Sales Quantity" desc;

-- 3. What is the total revenue generated from each marketing campaign?

select campaign_name,sum(tr.quantity*sc.price) as "Revenue" from  marketing_campaigns mc
inner join transactions2 tr on mc.product_id=tr.product_id
inner join sustainable_clothing sc on sc.product_id=tr.product_id
group by mc.campaign_name

-- 4. What is the top-selling product category based on the total revenue generated?

select Top(1) sc.product_name,sum(tr.quantity*sc.price) as "Revenue" from  marketing_campaigns mc
inner join transactions2 tr on mc.product_id=tr.product_id
inner join sustainable_clothing sc on sc.product_id=tr.product_id
group by sc.product_name

-- 5. Which products had a higher quantity sold compared to the average quantity sold?

SELECT Top(1) sc.product_name,avg(tr.quantity)as "Avg quantity"
FROM sustainable_clothing AS sc
JOIN transactions2 AS tr 
ON (sc.product_id = tr.product_id)
group by sc.product_name
order by "Avg quantity" desc;

-- 6. What is the average revenue generated per day during the marketing campaigns?

SELECT mc.campaign_name, round(AVG(t.quantity * sc.price),2) AS average_revenue_per_day
FROM marketing_campaigns AS mc
JOIN transactions2 AS t ON mc.product_id = t.product_id
JOIN sustainable_clothing AS sc ON mc.product_id = sc.product_id
GROUP BY mc.campaign_name
order by average_revenue_per_day desc;

-- 7. What is the percentage contribution of each product to the total revenue?

select sc.product_name,sum(sc.price*tr.quantity) as "Revenue" ,round(sum(sc.price*tr.quantity)/
 (select sum(sc.price*tr.quantity) from transactions2 tr
 inner join sustainable_clothing sc on sc.product_id=tr.product_id)*100,2) as "Each Product Contribution"
from transactions2 tr
inner join sustainable_clothing sc 
on tr.product_id=sc.product_id
group by sc.product_name
order by "Each Product Contribution" desc;

-- 8. Compare the average quantity sold during marketing campaigns to outside the marketing campaigns

select 'Marketing Campaign' as Sales_channel, avg(tr.quantity)  as "Avg Qty Sold" from transactions2 tr
inner join sustainable_clothing sc on sc.product_id=tr.product_id
union
select 'Outside Marketing Campaign' as "Sales_channel", avg(tr.quantity) as "Avg Qty Sold" from transactions2 tr
inner join sustainable_clothing sc on sc.product_id=tr.product_id
where tr.product_id not in (select product_id from marketing_campaigns)

-- 9. Compare the revenue generated by products inside the marketing campaigns to outside the campaigns

select 'Inside Marketing Campaign' as Revenue,sum(tr.quantity*sc.price) as "Total Revenue" from transactions2 tr
inner join sustainable_clothing sc on (sc.product_id=tr.product_id)
where tr.product_id  in (select product_id from marketing_campaigns)
union
select 'Outside Marketing Campaign' as Revenue,sum(tr.quantity*sc.price) as "Total Revenue" from transactions2 tr
inner join sustainable_clothing sc on (sc.product_id=tr.product_id)
where tr.product_id not in (select product_id from marketing_campaigns)


---10. Rank the products by their average daily quantity sold

SELECT sc.product_name, SUM(t.quantity) / COUNT(DISTINCT t.purchase_date) AS average_daily_quantity
FROM sustainable_clothing AS sc
JOIN transactions2 AS t ON sc.product_id = t.product_id
GROUP BY sc.product_name
ORDER BY average_daily_quantity DESC;







